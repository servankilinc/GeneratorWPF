// <auto-generated />
using System;
using GeneratorWPF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeneratorWPF.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20250718062816_ReportDto")]
    partial class ReportDto
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GeneratorWPF.Models.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<string>("DBConnectionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsThereIdentiy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereRole")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereUser")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleEntityId")
                        .HasColumnType("int");

                    b.Property<string>("SolutionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleEntityId")
                        .IsUnique()
                        .HasFilter("[RoleEntityId] IS NOT NULL");

                    b.HasIndex("UserEntityId")
                        .IsUnique()
                        .HasFilter("[UserEntityId] IS NOT NULL");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Control = false,
                            DBConnectionString = "Data Source=.; Initial Catalog=MyGeneratedDatabase; Integrated Security=SSPI; Trusted_Connection=True; TrustServerCertificate=True;",
                            IsThereIdentiy = true,
                            IsThereRole = false,
                            IsThereUser = false,
                            Path = "C:\\Generator",
                            ProjectName = "MyProject",
                            SolutionName = "MyProject"
                        });
                });

            modelBuilder.Entity("GeneratorWPF.Models.CrudType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CrudTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Control = false,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 2,
                            Control = false,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 3,
                            Control = false,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Control = false,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("GeneratorWPF.Models.DeleteBehaviorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeleteBehaviorTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Control = false,
                            Name = "Cascade"
                        },
                        new
                        {
                            Id = 2,
                            Control = false,
                            Name = "ClientCascade"
                        },
                        new
                        {
                            Id = 3,
                            Control = false,
                            Name = "Restrict"
                        },
                        new
                        {
                            Id = 4,
                            Control = false,
                            Name = "ClientSetNull"
                        },
                        new
                        {
                            Id = 5,
                            Control = false,
                            Name = "ClientNoAction"
                        },
                        new
                        {
                            Id = 6,
                            Control = false,
                            Name = "SetNull"
                        },
                        new
                        {
                            Id = 7,
                            Control = false,
                            Name = "NoAction"
                        });
                });

            modelBuilder.Entity("GeneratorWPF.Models.Dto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<int>("CrudTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelatedEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrudTypeId");

                    b.HasIndex("RelatedEntityId");

                    b.ToTable("Dtos");
                });

            modelBuilder.Entity("GeneratorWPF.Models.DtoField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<int>("DtoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsList")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceFieldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DtoId");

                    b.HasIndex("SourceFieldId");

                    b.ToTable("DtoFields");
                });

            modelBuilder.Entity("GeneratorWPF.Models.DtoFieldRelations", b =>
                {
                    b.Property<int>("DtoFieldId")
                        .HasColumnType("int");

                    b.Property<int>("RelationId")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.HasKey("DtoFieldId", "RelationId", "SequenceNo");

                    b.HasIndex("RelationId");

                    b.ToTable("DtoFieldRelations");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archivable")
                        .HasColumnType("bit");

                    b.Property<bool>("Auditable")
                        .HasColumnType("bit");

                    b.Property<int?>("BasicResponseDtoId")
                        .HasColumnType("int");

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<int?>("CreateDtoId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleteDtoId")
                        .HasColumnType("int");

                    b.Property<int?>("DetailResponseDtoId")
                        .HasColumnType("int");

                    b.Property<bool>("Loggable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReportDtoId")
                        .HasColumnType("int");

                    b.Property<bool>("SoftDeletable")
                        .HasColumnType("bit");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdateDtoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasicResponseDtoId");

                    b.HasIndex("CreateDtoId");

                    b.HasIndex("DeleteDtoId");

                    b.HasIndex("DetailResponseDtoId");

                    b.HasIndex("ReportDtoId");

                    b.HasIndex("UpdateDtoId");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsList")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("GeneratorWPF.Models.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceTypeId");

                    b.ToTable("FieldTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Control = false,
                            Name = "Int",
                            SourceTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Control = false,
                            Name = "String",
                            SourceTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Control = false,
                            Name = "Long",
                            SourceTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Control = false,
                            Name = "Float",
                            SourceTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Control = false,
                            Name = "Double",
                            SourceTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Control = false,
                            Name = "Bool",
                            SourceTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Control = false,
                            Name = "Char",
                            SourceTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Control = false,
                            Name = "Byte",
                            SourceTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Control = false,
                            Name = "DateTime",
                            SourceTypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            Control = false,
                            Name = "DateOnly",
                            SourceTypeId = 1
                        },
                        new
                        {
                            Id = 11,
                            Control = false,
                            Name = "Guid",
                            SourceTypeId = 1
                        });
                });

            modelBuilder.Entity("GeneratorWPF.Models.FieldTypeSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FieldTypeSources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Control = false,
                            Name = "Base"
                        },
                        new
                        {
                            Id = 2,
                            Control = false,
                            Name = "Entity"
                        },
                        new
                        {
                            Id = 3,
                            Control = false,
                            Name = "Dto"
                        });
                });

            modelBuilder.Entity("GeneratorWPF.Models.Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAsync")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVoid")
                        .HasColumnType("bit");

                    b.Property<int?>("MethodReturnFieldId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("GeneratorWPF.Models.MethodArgumentField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsList")
                        .HasColumnType("bit");

                    b.Property<int>("MethodId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("MethodId");

                    b.ToTable("MethodArgumentFields");
                });

            modelBuilder.Entity("GeneratorWPF.Models.MethodReturnField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsList")
                        .HasColumnType("bit");

                    b.Property<int>("MethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldTypeId")
                        .IsUnique();

                    b.HasIndex("MethodId")
                        .IsUnique();

                    b.ToTable("MethodReturnFields");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<int>("DeleteBehaviorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ForeignEntityVirPropName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForeignFieldId")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryEntityVirPropName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrimaryFieldId")
                        .HasColumnType("int");

                    b.Property<int>("RelationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeleteBehaviorTypeId");

                    b.HasIndex("ForeignFieldId");

                    b.HasIndex("RelationTypeId");

                    b.HasIndex("PrimaryFieldId", "ForeignFieldId")
                        .IsUnique();

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("GeneratorWPF.Models.RelationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RelationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Control = false,
                            Name = "OnoToOne"
                        },
                        new
                        {
                            Id = 2,
                            Control = false,
                            Name = "OnoToMany"
                        });
                });

            modelBuilder.Entity("GeneratorWPF.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<int>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceLayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RelatedEntityId");

                    b.HasIndex("ServiceLayerId", "RelatedEntityId")
                        .IsUnique();

                    b.ToTable("Services");
                });

            modelBuilder.Entity("GeneratorWPF.Models.ServiceLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceLayers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Control = false,
                            Name = "Core"
                        },
                        new
                        {
                            Id = 2,
                            Control = false,
                            Name = "Model"
                        },
                        new
                        {
                            Id = 3,
                            Control = false,
                            Name = "DataAccess"
                        },
                        new
                        {
                            Id = 4,
                            Control = false,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 5,
                            Control = false,
                            Name = "Presentation"
                        });
                });

            modelBuilder.Entity("GeneratorWPF.Models.Validation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<int>("DtoFieldId")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValidatorTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DtoFieldId");

                    b.HasIndex("ValidatorTypeId");

                    b.ToTable("Validations");
                });

            modelBuilder.Entity("GeneratorWPF.Models.ValidationParam", b =>
                {
                    b.Property<int>("ValidationId")
                        .HasColumnType("int");

                    b.Property<int>("ValidatorTypeParamId")
                        .HasColumnType("int");

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ValidationId", "ValidatorTypeParamId");

                    b.HasIndex("ValidatorTypeParamId");

                    b.ToTable("ValidationParams");
                });

            modelBuilder.Entity("GeneratorWPF.Models.ValidatorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ValidatorTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Control = false,
                            Description = "Field cannot be empty",
                            Name = "NotEmpty"
                        },
                        new
                        {
                            Id = 2,
                            Control = false,
                            Description = "Field cannot be null",
                            Name = "NotNull"
                        },
                        new
                        {
                            Id = 3,
                            Control = false,
                            Description = "Field cannot be ...",
                            Name = "NotEqual"
                        },
                        new
                        {
                            Id = 4,
                            Control = false,
                            Description = "Field cannot exceed maximum length",
                            Name = "MaxLength"
                        },
                        new
                        {
                            Id = 5,
                            Control = false,
                            Description = "Value must be within a specific range",
                            Name = "Range"
                        },
                        new
                        {
                            Id = 6,
                            Control = false,
                            Description = "Field must have a minimum number of characters",
                            Name = "MinLength"
                        },
                        new
                        {
                            Id = 7,
                            Control = false,
                            Description = "Field must match a regular expression",
                            Name = "Regex"
                        },
                        new
                        {
                            Id = 8,
                            Control = false,
                            Description = "Value must be greater than a specific number",
                            Name = "GreaterThan"
                        },
                        new
                        {
                            Id = 9,
                            Control = false,
                            Description = "Value must be less than a specific number",
                            Name = "LessThan"
                        },
                        new
                        {
                            Id = 10,
                            Control = false,
                            Description = "Field must be a valid email address",
                            Name = "EmailAddress"
                        },
                        new
                        {
                            Id = 11,
                            Control = false,
                            Description = "Field must be a valid credit card number",
                            Name = "CreditCard"
                        },
                        new
                        {
                            Id = 12,
                            Control = false,
                            Description = "Field must be a valid phone number",
                            Name = "Phone"
                        },
                        new
                        {
                            Id = 13,
                            Control = false,
                            Description = "Field must be a valid URL",
                            Name = "Url"
                        },
                        new
                        {
                            Id = 14,
                            Control = false,
                            Description = "Field must be a valid date",
                            Name = "Date"
                        },
                        new
                        {
                            Id = 15,
                            Control = false,
                            Description = "Field must be a valid number",
                            Name = "Number"
                        },
                        new
                        {
                            Id = 16,
                            Control = false,
                            Description = "Field mus be a valid guid value",
                            Name = "GuidNotEmpty"
                        },
                        new
                        {
                            Id = 17,
                            Control = false,
                            Description = "Field must have a exact number of characters\", \"Length",
                            Name = "Length"
                        });
                });

            modelBuilder.Entity("GeneratorWPF.Models.ValidatorTypeParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Control")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValidatorTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ValidatorTypeId");

                    b.ToTable("ValidatorTypeParams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Control = false,
                            Key = "Value",
                            ValidatorTypeId = 3
                        },
                        new
                        {
                            Id = 2,
                            Control = false,
                            Key = "Max",
                            ValidatorTypeId = 4
                        },
                        new
                        {
                            Id = 3,
                            Control = false,
                            Key = "Min",
                            ValidatorTypeId = 5
                        },
                        new
                        {
                            Id = 4,
                            Control = false,
                            Key = "Max",
                            ValidatorTypeId = 5
                        },
                        new
                        {
                            Id = 5,
                            Control = false,
                            Key = "Min",
                            ValidatorTypeId = 6
                        },
                        new
                        {
                            Id = 6,
                            Control = false,
                            Key = "Pattern",
                            ValidatorTypeId = 7
                        },
                        new
                        {
                            Id = 7,
                            Control = false,
                            Key = "Value",
                            ValidatorTypeId = 8
                        },
                        new
                        {
                            Id = 8,
                            Control = false,
                            Key = "Value",
                            ValidatorTypeId = 9
                        },
                        new
                        {
                            Id = 9,
                            Control = false,
                            Key = "Value",
                            ValidatorTypeId = 17
                        });
                });

            modelBuilder.Entity("GeneratorWPF.Models.AppSetting", b =>
                {
                    b.HasOne("GeneratorWPF.Models.Entity", "RoleEntity")
                        .WithOne("AsRoleAppSetting")
                        .HasForeignKey("GeneratorWPF.Models.AppSetting", "RoleEntityId");

                    b.HasOne("GeneratorWPF.Models.Entity", "UserEntity")
                        .WithOne("AsUserAppSetting")
                        .HasForeignKey("GeneratorWPF.Models.AppSetting", "UserEntityId");

                    b.Navigation("RoleEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Dto", b =>
                {
                    b.HasOne("GeneratorWPF.Models.CrudType", "CrudType")
                        .WithMany("Dtos")
                        .HasForeignKey("CrudTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.Entity", "RelatedEntity")
                        .WithMany("Dtos")
                        .HasForeignKey("RelatedEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CrudType");

                    b.Navigation("RelatedEntity");
                });

            modelBuilder.Entity("GeneratorWPF.Models.DtoField", b =>
                {
                    b.HasOne("GeneratorWPF.Models.Dto", "Dto")
                        .WithMany("DtoFields")
                        .HasForeignKey("DtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.Field", "SourceField")
                        .WithMany("DtoFields")
                        .HasForeignKey("SourceFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dto");

                    b.Navigation("SourceField");
                });

            modelBuilder.Entity("GeneratorWPF.Models.DtoFieldRelations", b =>
                {
                    b.HasOne("GeneratorWPF.Models.DtoField", "DtoField")
                        .WithMany("DtoFieldRelations")
                        .HasForeignKey("DtoFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.Relation", "Relation")
                        .WithMany("DtoFieldRelations")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DtoField");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Entity", b =>
                {
                    b.HasOne("GeneratorWPF.Models.Dto", "BasicResponseDto")
                        .WithMany("BasicResponseEntities")
                        .HasForeignKey("BasicResponseDtoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeneratorWPF.Models.Dto", "CreateDto")
                        .WithMany("CreateEntities")
                        .HasForeignKey("CreateDtoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeneratorWPF.Models.Dto", "DeleteDto")
                        .WithMany("DeleteEntities")
                        .HasForeignKey("DeleteDtoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeneratorWPF.Models.Dto", "DetailResponseDto")
                        .WithMany("DetailResponseEntities")
                        .HasForeignKey("DetailResponseDtoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeneratorWPF.Models.Dto", "ReportDto")
                        .WithMany("ReportEntities")
                        .HasForeignKey("ReportDtoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeneratorWPF.Models.Dto", "UpdateDto")
                        .WithMany("UpdateEntities")
                        .HasForeignKey("UpdateDtoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BasicResponseDto");

                    b.Navigation("CreateDto");

                    b.Navigation("DeleteDto");

                    b.Navigation("DetailResponseDto");

                    b.Navigation("ReportDto");

                    b.Navigation("UpdateDto");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Field", b =>
                {
                    b.HasOne("GeneratorWPF.Models.Entity", "Entity")
                        .WithMany("Fields")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.FieldType", "FieldType")
                        .WithMany("Fields")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("GeneratorWPF.Models.FieldType", b =>
                {
                    b.HasOne("GeneratorWPF.Models.FieldTypeSource", "SourceType")
                        .WithMany("FieldTypes")
                        .HasForeignKey("SourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceType");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Method", b =>
                {
                    b.HasOne("GeneratorWPF.Models.Service", "Service")
                        .WithMany("Methods")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("GeneratorWPF.Models.MethodArgumentField", b =>
                {
                    b.HasOne("GeneratorWPF.Models.FieldType", "FieldType")
                        .WithMany("MethodArgumentFields")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.Method", "Method")
                        .WithMany("ArgumentMethodFields")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldType");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("GeneratorWPF.Models.MethodReturnField", b =>
                {
                    b.HasOne("GeneratorWPF.Models.FieldType", "FieldType")
                        .WithMany("MethodReturnFields")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.Method", "Method")
                        .WithOne("MethodReturnField")
                        .HasForeignKey("GeneratorWPF.Models.MethodReturnField", "FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldType");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Relation", b =>
                {
                    b.HasOne("GeneratorWPF.Models.DeleteBehaviorType", "DeleteBehaviorType")
                        .WithMany("Relations")
                        .HasForeignKey("DeleteBehaviorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.Field", "ForeignField")
                        .WithMany("RelationsForeign")
                        .HasForeignKey("ForeignFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.Field", "PrimaryField")
                        .WithMany("RelationsPrimary")
                        .HasForeignKey("PrimaryFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.RelationType", "RelationType")
                        .WithMany("Relations")
                        .HasForeignKey("RelationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeleteBehaviorType");

                    b.Navigation("ForeignField");

                    b.Navigation("PrimaryField");

                    b.Navigation("RelationType");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Service", b =>
                {
                    b.HasOne("GeneratorWPF.Models.Entity", "RelatedEntity")
                        .WithMany("Services")
                        .HasForeignKey("RelatedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.ServiceLayer", "ServiceLayer")
                        .WithMany("Services")
                        .HasForeignKey("ServiceLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedEntity");

                    b.Navigation("ServiceLayer");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Validation", b =>
                {
                    b.HasOne("GeneratorWPF.Models.DtoField", "DtoField")
                        .WithMany("Validations")
                        .HasForeignKey("DtoFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.ValidatorType", "ValidatorType")
                        .WithMany("Validations")
                        .HasForeignKey("ValidatorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DtoField");

                    b.Navigation("ValidatorType");
                });

            modelBuilder.Entity("GeneratorWPF.Models.ValidationParam", b =>
                {
                    b.HasOne("GeneratorWPF.Models.Validation", "Validation")
                        .WithMany("ValidationParams")
                        .HasForeignKey("ValidationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneratorWPF.Models.ValidatorTypeParam", "ValidatorTypeParam")
                        .WithMany("ValidationParams")
                        .HasForeignKey("ValidatorTypeParamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Validation");

                    b.Navigation("ValidatorTypeParam");
                });

            modelBuilder.Entity("GeneratorWPF.Models.ValidatorTypeParam", b =>
                {
                    b.HasOne("GeneratorWPF.Models.ValidatorType", "ValidatorType")
                        .WithMany("ValidatorTypeParams")
                        .HasForeignKey("ValidatorTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ValidatorType");
                });

            modelBuilder.Entity("GeneratorWPF.Models.CrudType", b =>
                {
                    b.Navigation("Dtos");
                });

            modelBuilder.Entity("GeneratorWPF.Models.DeleteBehaviorType", b =>
                {
                    b.Navigation("Relations");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Dto", b =>
                {
                    b.Navigation("BasicResponseEntities");

                    b.Navigation("CreateEntities");

                    b.Navigation("DeleteEntities");

                    b.Navigation("DetailResponseEntities");

                    b.Navigation("DtoFields");

                    b.Navigation("ReportEntities");

                    b.Navigation("UpdateEntities");
                });

            modelBuilder.Entity("GeneratorWPF.Models.DtoField", b =>
                {
                    b.Navigation("DtoFieldRelations");

                    b.Navigation("Validations");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Entity", b =>
                {
                    b.Navigation("AsRoleAppSetting");

                    b.Navigation("AsUserAppSetting");

                    b.Navigation("Dtos");

                    b.Navigation("Fields");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Field", b =>
                {
                    b.Navigation("DtoFields");

                    b.Navigation("RelationsForeign");

                    b.Navigation("RelationsPrimary");
                });

            modelBuilder.Entity("GeneratorWPF.Models.FieldType", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("MethodArgumentFields");

                    b.Navigation("MethodReturnFields");
                });

            modelBuilder.Entity("GeneratorWPF.Models.FieldTypeSource", b =>
                {
                    b.Navigation("FieldTypes");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Method", b =>
                {
                    b.Navigation("ArgumentMethodFields");

                    b.Navigation("MethodReturnField");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Relation", b =>
                {
                    b.Navigation("DtoFieldRelations");
                });

            modelBuilder.Entity("GeneratorWPF.Models.RelationType", b =>
                {
                    b.Navigation("Relations");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Service", b =>
                {
                    b.Navigation("Methods");
                });

            modelBuilder.Entity("GeneratorWPF.Models.ServiceLayer", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("GeneratorWPF.Models.Validation", b =>
                {
                    b.Navigation("ValidationParams");
                });

            modelBuilder.Entity("GeneratorWPF.Models.ValidatorType", b =>
                {
                    b.Navigation("Validations");

                    b.Navigation("ValidatorTypeParams");
                });

            modelBuilder.Entity("GeneratorWPF.Models.ValidatorTypeParam", b =>
                {
                    b.Navigation("ValidationParams");
                });
#pragma warning restore 612, 618
        }
    }
}
